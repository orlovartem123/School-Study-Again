@using SchoolBusinessLogic.ViewModels.TeacherModels
@model ElectiveViewModel
@{
    ViewData["Title"] = "UpdateElective";
}

<div class="text-center">
    <h2 class="display-4"><span color="#449d35">Update elective</span></h2>
</div>

﻿<form class="container-fluid" style="max-width: 580px;" asp-action="Update">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <input asp-for="Id" value="@(Model.Id)" style="display: none;" />
    <div class="form-group">
        <div class="row justify-content-between">
            <label class="col-lg-4">
                Elective name
            </label>
            <div class="col-lg-8">
                <input asp-for="Name" type="text" name="name" required class="form-control" />
            </div>
        </div>
    </div>

    <div class="form-group">
        <div class="row">
            <label class="col-lg-4 justify-content-between">
                Elective price
            </label>
            <div class="col-lg-8">
                <input asp-for="Price" name="price" class="form-control" />
                <span asp-validation-for="Price" class="text-danger"></span>
            </div>
        </div>
    </div>

    <div class="form-group row">
        <div class="col-lg-12">
            <button type="submit" style="min-width: 100px" class="btn btn-sm btn-light">
                Update
            </button>
        </div>
    </div>
</form>
@section Scripts{
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        // переопределение валидации на стороне клиента
        $.validator.methods.range = function (value, element, param) {
            var globalizedValue = value.replace(",", ".");
            return this.optional(element) || (globalizedValue >= param[0] && globalizedValue <= param[1]);
        }

        $.validator.methods.number = function (value, element) {
            return this.optional(element) || /^-?(?:\d+|\d{1,3}(?:[\s\.,]\d{3})+)(?:[\.,]\d+)?$/.test(value);
        }
    </script>
}